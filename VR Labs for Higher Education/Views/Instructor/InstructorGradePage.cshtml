@using MongoDB.Bson
@using System.Linq

@{
    Layout = "_Layout";
    ViewData["Title"] = "Instructor Grade Page";
    var labId = ViewData["LabId"] as string;
    var studentsWithCompletedLabs = ViewData["StudentsWithCompletedLabs"] as List<BsonDocument>;
}

<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/site.css">

<div class="text-center">
    <br /><br />
    <p style="font-family: 'Open Sans', sans-serif; font-size: 18px;">Select a student to grade for @labId.</p>
    <br />
    <div class="row">
        @foreach (var student in studentsWithCompletedLabs)
        {
            var labProgressArray = student["labProgress"].AsBsonArray;
            var currentGrade = double.NaN; // Default to NaN

            if (labProgressArray.Any())
            {
                var labProgress = labProgressArray.FirstOrDefault(lp => lp["labId"] == labId);
                if (labProgress != null && labProgress["grade"] != BsonNull.Value)
                {
                    currentGrade = labProgress["grade"].ToDouble();
                }

                var checkpointsArray = labProgress["checkpoints"].AsBsonArray;
                var sortedCheckpoints = checkpointsArray.OrderBy(c => c["timestamp"]).ToList();

                var studentId = student["_id"].ToString();
                DateTime? previousCheckpointTime = null;

                <div class="col-md-4">
                    <div class="student-card" style="padding: 20px; border: 1px solid #ddd; border-radius: 10px; margin-bottom: 20px; text-align: left;">
                        <h3 style="font-family: 'Open Sans', sans-serif; color: #0056b3;text-align: center;">@student["name"]</h3>
                        <br />
                        <p style="font-family: 'Open Sans', sans-serif;"><strong>Lab ID:</strong> @labId</p>
                        <p style="font-family: 'Open Sans', sans-serif;"><strong>Grade:</strong> @(double.IsNaN(currentGrade) ? "Not Graded" : currentGrade.ToString())</p>
                        <!-- Display date -->
                        @if (sortedCheckpoints.Any())
                        {
                            var initialDate = sortedCheckpoints.First()["timestamp"].ToUniversalTime();
                            <p style="font-family: 'Open Sans', sans-serif;"><strong>Date:</strong> @initialDate.ToString("MM/dd/yyyy")</p>
                        }
                        <!-- Display checkpoints -->
                        <p style="font-family: 'Open Sans', sans-serif;margin-bottom:2px;">
                            <strong>Checkpoints:</strong>
                        </p>
                        <ul style="list-style-type: disc;padding-left: 20px;">
                            @foreach (var checkpoint in sortedCheckpoints)
                            {
                                var checkpointTimestamp = checkpoint["timestamp"].IsValidDateTime ? checkpoint["timestamp"].ToUniversalTime() : (DateTime?)null;
                                var timeDifference = checkpointTimestamp.HasValue && previousCheckpointTime.HasValue ? checkpointTimestamp.Value.Subtract(previousCheckpointTime.Value) : TimeSpan.Zero;

                                // Add 3 hours to the checkpoint timestamp
                                var checkpointTimestampPlus3Hours = checkpointTimestamp?.AddHours(3);

                                var formattedTime = checkpointTimestampPlus3Hours?.ToString("HH:mm:ss") ?? "Not Set";
                                var checkpointName = checkpoint["name"].AsString;
                                previousCheckpointTime = checkpointTimestamp;

                                <li>
                                    <strong>@checkpointName:</strong> @formattedTime
                                    @if (checkpointTimestamp.HasValue)
                                    {
                                        <em>(+@timeDifference.Minutes mins, @timeDifference.Seconds secs)</em>
                                    }
                                    else
                                    {
                                        <span>Not Set</span>
                                    }
                                </li>
                            }
                        </ul>
                        <br />
                        <p style="font-family: 'Open Sans', sans-serif;"><strong>Update Grade:</strong></p>
                        <form method="post" action="/Instructor/UpdateGrade" style="font-family: 'Open Sans', sans-serif; display: flex; align-items: center; gap: 10px;">
                            <input type="hidden" name="studentId" value="@studentId" />
                            <input type="hidden" name="labId" value="@labId" />
                            <input type="number" id="grade" name="grade" step="0.01" style="padding: 5px; border: 1px solid #ddd; border-radius: 5px;" />
                            <button type="submit" style="background-color: #0056b3; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;" class="ml-2">Submit</button>
                        </form>
                    </div>
                </div>
            }
        }
    </div>
    <br /><br />
</div>
